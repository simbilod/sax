# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06b_netlist_cleaning.ipynb (unless otherwise specified).

__all__ = ['remove_unused_instances']

# Cell
from collections import defaultdict
from typing import Dict, List

from natsort import natsorted
from .backends.additive import graph_edges
from .typing_ import SDict
import networkx as nx

try:
    import jax.numpy as jnp
    JAX_AVAILABLE = True
except ImportError:
    import numpy as jnp
    JAX_AVAILABLE = False

# Cell
def _get_connectivity_netlist(netlist):
    connectivity_netlist = {
        "instances": natsorted(netlist['instances']),
        "connections": [
            (c1.split(',')[0], c2.split(',')[0]) for c1, c2 in netlist['connections'].items()
        ],
        "ports": [(p, c.split(',')[0]) for p, c in netlist['ports'].items()],
    }
    return connectivity_netlist

# Cell
def _get_connectivity_graph(netlist):
    graph = nx.Graph()
    connectivity_netlist = _get_connectivity_netlist(netlist)
    for c1, c2 in connectivity_netlist['connections']:
        graph.add_edge(c1, c2)
    for c1, c2 in connectivity_netlist['ports']:
        graph.add_edge(c1, c2)
    return graph

# Cell
def _get_nodes_to_remove(graph, netlist):
    nodes = set()
    for port in netlist['ports']:
        nodes |= nx.descendants(graph, port)
    nodes_to_remove = set(graph.nodes) - nodes
    return list(nodes_to_remove)

# Cell
def _remove_unused_instances_flat(flat_netlist):
    flat_netlist = {**flat_netlist}

    graph = _get_connectivity_graph(flat_netlist)
    names = set(_get_nodes_to_remove(graph, flat_netlist))

    flat_netlist['instances'] = {**flat_netlist['instances']}
    for name in list(names):
        del flat_netlist['instances'][name]

    flat_netlist['connections'] = {**flat_netlist['connections']}
    for conn1, conn2 in list(flat_netlist['connections'].items()):
        for conn in [conn1, conn2]:
            name, _ = conn.split(',')
            if name in names and conn1 in flat_netlist['connections']:
                del flat_netlist['connections'][conn1]

    flat_netlist['ports'] = {**flat_netlist['ports']}
    for pname, conn in list(flat_netlist['ports'].items()):
        name, _ = conn.split(',')
        if name in names and pname in flat_netlist['ports']:
            del flat_netlist['ports'][pname]

    return flat_netlist

def remove_unused_instances(recursive_netlist):
    recursive_netlist = {**recursive_netlist}

    for name, flat_netlist in recursive_netlist.items():
        recursive_netlist[name] = _remove_unused_instances_flat(flat_netlist)

    return recursive_netlist